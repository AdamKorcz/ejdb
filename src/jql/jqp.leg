%{
#include "jqp.h"
#include "jbldom.h"


#define YY_CTX_LOCAL 1
#define YY_CTX_MEMBERS \
  JQPAUX *aux;

struct _yycontext;
static void *_jqp_malloc(struct _yycontext *yy, size_t size);
static void *_jqp_realloc(struct _yycontext *yy, void *ptr, size_t size);
static JQPUNIT *_jqp_unit(struct _yycontext *yy);

static void _jqp_op_negate(struct _yycontext *yy);
static JQPUNIT *_jqp_string(struct _yycontext *yy, jqp_string_flavours_t flags, const char *text);
static JQPUNIT *_jqp_number(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_unit_op(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_unit_join(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_expr(struct _yycontext *yy, JQPUNIT *left, JQPUNIT *op, JQPUNIT *right);
static JQPUNIT *_jqp_node(struct _yycontext *yy, JQPUNIT *value);
static JQPUNIT *_jqp_projection(struct _yycontext *yy, JQPUNIT *value);

static JQPUNIT *_jqp_json_string(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_json_number(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_json_true_false_null(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_json_pair(struct _yycontext *yy, JQPUNIT *key, JQPUNIT *val);
static JQPUNIT *_jqp_json_collect(struct _yycontext *yy, jbl_type_t type, JQPUNIT *until);

static JQPSTACK *_jqp_push(struct _yycontext *yy);
static void _jqp_unit_push(struct _yycontext *yy, JQPUNIT *unit);
static JQPUNIT *_jqp_unit_pop(struct _yycontext *yy);
static void _jqp_string_push(struct _yycontext *yy, char *str, bool dup);
static char *_jqp_string_pop(struct _yycontext *yy);

static JQPUNIT *_jqp_pop_expr_chain(struct _yycontext *yy, JQPUNIT *until);
static JQPUNIT *_jqp_pop_node_chain(struct _yycontext *yy, JQPUNIT *until);
static JQPUNIT *_jqp_pop_projfields_chain(struct _yycontext *yy, JQPUNIT *until);
static JQPUNIT *_jqp_pop_projections(struct _yycontext *yy, JQPUNIT *until);
static JQPUNIT *_jqp_push_joined_projection(struct _yycontext *yy, JQPUNIT *p);
static JQPUNIT *_jqp_pop_joined_projections(struct _yycontext *yy, JQPUNIT *until);

static JQPUNIT *_jqp_pop_filters_and_set_query(struct _yycontext *yy, JQPUNIT *until);
static void _jqp_set_apply(struct _yycontext *yy, JQPUNIT *unit);
static void _jqp_set_projection(struct _yycontext *yy, JQPUNIT *unit);

#define YYSTYPE JQPUNIT*
#define YY_MALLOC(yy_, sz_) _jqp_malloc(yy_, sz_)
#define YY_REALLOC(yy_, ptr_, sz_) _jqp_realloc(yy_, ptr_, sz_)

#define YY_INPUT(yy_, buf_, result_, max_size_)	        \
  {	                                                    \
    JQPAUX *aux = (yy_)->aux;                           \
    if (aux->rc || *(aux->buf + aux->pos) == '\0') {    \
      result_ = 0;                                      \
    } else {                                            \
      char ch = *(aux->buf + aux->pos++);               \
      result_ = 1;                                      \
      *(buf_)= ch;                                      \
    }                                                   \
  }
%}

QUERY = (ff:FILTER { _jqp_unit_push(yy, ff); } 
          (__ j:FILTERJOIN { _jqp_unit_push(yy, j); } __ f:FILTER { _jqp_unit_push(yy, f); })*)
          { _jqp_pop_filters_and_set_query(yy, ff); }
        (_ a:APPLY { _jqp_set_apply(yy, a); } )? 
        (_ p:PROJECTION { _jqp_set_projection(yy, p); } )? _ EOF

FILTERJOIN = (<("and" | "or")> (__ "not" { _jqp_op_negate(yy); })?)   { $$ = _jqp_unit_join(yy, yytext); }

APPLY = ('|' _ "apply" __ ( p:PLACEHOLDER { $$ = p; } | o:OBJJ { $$ = o; } | a:ARRJ { $$ = a; } ) )

PROJECTION = '|' _ (sn:PROJNODES { _jqp_unit_push(yy, sn); } 
                   (__ <PROJOIN> { _jqp_string_push(yy, yytext, true); } _ n:PROJNODES { _jqp_push_joined_projection(yy, n); } )*)
                   { $$ = _jqp_pop_joined_projections(yy, sn); }

PROJNODES = (a:PROJALL { $$ = _jqp_projection(yy, a); } 
            | (sn:PROJNODE { _jqp_unit_push(yy, sn); } (n:PROJNODE { _jqp_unit_push(yy, n);})*) { $$ = _jqp_pop_projections(yy, sn); })

PROJALL = <"all"> { $$ = _jqp_string(yy, JQP_STR_PROJALIAS, yytext); }

PROJNODE = '/' (p:PROJFIELDS | p:PROJPROP) { $$ = p;  }

PROJFIELDS = ('{' _ sp:PROJPROP { _jqp_unit_push(yy, sp); } (_ ',' _ p:PROJPROP { _jqp_unit_push(yy, p); } )* _ '}')
             { $$ = _jqp_pop_projfields_chain(yy, sp); }

PROJPROP = STRN | PSTRP

PROJOIN = ('+' | '-')

PSTRP = <PCHP+> { $$ = _jqp_string(yy, 0, yytext); }

PCHP = '\\' '\\'
      | '\\' [bfnrt]
      | '\\' 'u' HEX HEX HEX HEX
      | !["/{},\t\n\r ] .

FILTER = ((a:FILTERANCHOR { _jqp_unit_push(yy, a); })? 
           fn:NODE { _jqp_unit_push(yy, fn); } (n:NODE { _jqp_unit_push(yy, n); })*) 
           { $$ = _jqp_pop_node_chain(yy, fn);  }

FILTERANCHOR = '@' <([a-zA-Z0-9]+)> { $$ = _jqp_string(yy, JQP_STR_ANCHOR, yytext); }

NODE = '/' (n:STRN | n:NEXPR | n:STRP) { $$ = _jqp_node(yy, n); }

NEXPR = ('[' _ n:NEXPAIR { _jqp_unit_push(yy, n); } 
          ( __ j:NEXJOIN { _jqp_unit_push(yy, j); } __ np:NEXPAIR { _jqp_unit_push(yy, np); })* _ ']')   
          { $$ = _jqp_pop_expr_chain(yy, n); }

NEXJOIN = (<("and" | "or")> (__ "not" { _jqp_op_negate(yy); })?)        { $$ = _jqp_unit_join(yy, yytext); }  

NEXPAIR = (l:NEXLEFT _ o:NEXOP _ r:NEXRIGHT)                            { $$ = _jqp_expr(yy, l, o, r); }

NEXLEFT = (l:STRN | l:NEXPRLEFT | l:STRP)                               { $$ = l; }

NEXPRLEFT = ('[' _ (l:STRN | l:STRP) _ o:NEXOP _ r:NEXRIGHT _ ']')      { $$ = _jqp_expr(yy, l, o, r); }

NEXRIGHT = (r:PLACEHOLDER | r:VALJ)                                     { $$ = r; }

PLACEHOLDER = ':' <([a-zA-Z0-9]+ | '?')>                                { $$ = _jqp_string(yy, JQP_STR_PLACEHOLDER, yytext); }

NEXOP = ("not" __ { _jqp_op_negate(yy); })? <("like" | "in" | "re")>    { $$ = _jqp_unit_op(yy, yytext); } 
        | <(">=" | "gte")>                                              { $$ = _jqp_unit_op(yy, yytext); } 
        | <("<=" | "lte")>                                              { $$ = _jqp_unit_op(yy, yytext); } 
        | ('!' _  { _jqp_op_negate(yy); })? <('=' | "eq")>              { $$ = _jqp_unit_op(yy, yytext); } 
        | <('>' | "gt")>                                                { $$ = _jqp_unit_op(yy, yytext); } 
        | <('<' | "lt")>                                                { $$ = _jqp_unit_op(yy, yytext); } 
        
STRP = <CHP+> { $$ = _jqp_string(yy, 0, yytext); }

STRN = '"' <CHJ+> '"' { $$ = _jqp_string(yy, 0, yytext); }

OBJJ =  (s:SOBJJ { _jqp_unit_push(yy, s); } 
        _ (fp:PAIRJ { _jqp_unit_push(yy, fp); } (_ ',' _ p:PAIRJ { _jqp_unit_push(yy, p); })* )? _ '}')
        { $$ = _jqp_json_collect(yy, JBV_OBJECT, s); }

ARRJ =  (s:SARRJ { _jqp_unit_push(yy, s); } 
        _ (fv:VALJ { _jqp_unit_push(yy, fv); } (_ ',' _ v:VALJ { _jqp_unit_push(yy, v); })* )? _ ']')
        { $$ = _jqp_json_collect(yy, JBV_ARRAY, s); }
        
SOBJJ = '{' { $$ =  _jqp_unit(yy); }

SARRJ = '[' { $$ =  _jqp_unit(yy); }

PAIRJ = (s:STRJ _ ':' _ v:VALJ) { $$ = _jqp_json_pair(yy, s, v); }

VALJ =    v:STRJ    { $$ = v; }
        | v:NUMJ    { $$ = v; }
        | v:OBJJ    { $$ = v; }  
        | v:ARRJ    { $$ = v; }
        | "true"    { $$ = _jqp_json_true_false_null(yy, yytext); }
        | "false"   { $$ = _jqp_json_true_false_null(yy, yytext); }
        | "null"    { $$ = _jqp_json_true_false_null(yy, yytext); }

STRJ = '"' <(CHJ*)> '"' { $$ = _jqp_json_string(yy, yytext); }

HEX = [0-9A-Fa-f]

CHJ = '\\' '"'
      | '\\' '\\'
      | '\\' [bfnrt]
      | '\\' 'u' HEX HEX HEX HEX
      | !'"' .

CHP = '\\' '\\'
      | '\\' [bfnrt]
      | '\\' 'u' HEX HEX HEX HEX
      | ![/"[\]=><!\t\n\r ] .

NUMJ = <('-'? NUMI NUMF? NUME?)> { $$ = _jqp_json_number(yy, yytext); }

NUMI = '0' | [1-9] [0-9]*

NUMF = '.' [0-9]+

NUME = [eE] [+-]? [0-9]+

_ = SPACE*

__ = SPACE+

SPACE = ' ' | '\t' | EOL

EOL = ('\r\n' | '\n' | '\r') { yy->aux->line++; yy->aux->col = 1; }

EOF = !.

%%

#include "./inc/jqpx.c"