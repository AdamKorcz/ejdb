%{
#include "jqp.h"

#define YY_CTX_LOCAL 1
#define YY_CTX_MEMBERS \
  JQPAUX *aux;

struct _yycontext;
static void *_jqp_malloc(struct _yycontext *yy, size_t size);
static void *_jqp_realloc(struct _yycontext *yy, void *ptr, size_t size);

static JQPUNIT *_jqp_string(struct _yycontext *yy, jqp_strflags_t flags, const char *text);
static void _jqp_op_negate(struct _yycontext *yy);
static JQPUNIT *_jqp_unit_op(struct _yycontext *yy, const char *text);
static JQPUNIT *_jqp_unit_join(struct _yycontext *yy, const char *text);

static JQPSTACK *_jqp_push(struct _yycontext *yy);
static void _jpq_unit_push(struct _yycontext *yy, JQPUNIT *unit);
static JQPUNIT *_jqp_unit_pop(struct _yycontext *yy);
static void _jpq_string_push(struct _yycontext *yy, char *str);
static char *_jqp_string_pop(struct _yycontext *yy);
static void _jpq_int_push(struct _yycontext *yy, int64_t i64);
static int64_t _jqp_int_pop(struct _yycontext *yy);
static void _jpq_float_push(struct _yycontext *yy, double f64);
static double _jqp_double_pop(struct _yycontext *yy);
static JQPSTACK *_jqp_pop(struct _yycontext *yy);

#define YYSTYPE JQPUNIT*
#define YY_MALLOC(yy_, sz_) _jqp_malloc(yy_, sz_)
#define YY_REALLOC(yy_, ptr_, sz_) _jqp_realloc(yy_, ptr_, sz_)

#define YY_INPUT(yy_, buf_, result_, max_size_)	        \
  {	                                                    \
    JQPAUX *aux = (yy_)->aux;                           \
    if (aux->rc || *(aux->buf + aux->pos) == '\0') {    \
      result_ = 0;                                      \
    } else {                                            \
      char ch = *(aux->buf + aux->pos++);               \
      if (ch == '\n') {                                 \
        ++aux->line;                                    \
        aux->col = 0;                                   \
      }                                                 \
      ++aux->col;                                       \
      result_ = 1;                                      \
      *(buf_)= ch;                                      \
    }                                                   \
  }
%}

QUERY = FILTER (__ FILTERJOIN __ FILTER)* (_ APPLY)? (_ PROJ)? _ EOF

FILTERJOIN = (<("and" | "or")> (__ "not" { _jqp_op_negate(yy); })?)   { $$ = _jqp_unit_join(yy, yytext); }

APPLY = ('|' _ "apply" __ (PLACEHOLDER | OBJJ | ARRJ))

PROJ = '|' _ PROJCHAIN+

PROJCHAIN = PROJNODES (__ PROJOIN _ PROJNODES)*

PROJNODES = ("all" | PROJNODE PROJNODE*)

PROJNODE = '/' (PROJFIELDS | PROJPROP)

PROJFIELDS = '{' _ PROJPROP (_ ',' _ PROJPROP)* _ '}'

PROJPROP = STRN | PSTRP

PROJOIN = ('+' | '-')

PSTRP = <PCHP+> { $$ = _jqp_string(yy, 0, yytext); }

PCHP = '\\' '\\'
      | '\\' [bfnrt]
      | '\\' 'u' HEX HEX HEX HEX
      | !["/{},\t\n\r ] .

FILTER = FILTERANCHOR? (NODE NODE*)

FILTERANCHOR = '@' <[a-zA-Z0-9]+> { }

NODE = '/' (STRN | NEXPR | STRP)

NEXPR = '[' _ NEXPAIR (__ NEXJOIN __ NEXPAIR)* _ ']'

NEXJOIN = (<("and" | "or")> (__ "not" { _jqp_op_negate(yy); })?)        { $$ = _jqp_unit_join(yy, yytext); }  

NEXPAIR = NEXLEFT _ NEXOP _ NEXRIGHT

NEXLEFT = STRN | NEXPRLEFT | STRP

NEXPRLEFT = ('[' _ (s:STRN | s:STRP) _ o:NEXOP _ r:NEXRIGHT _ ']') {  }

NEXRIGHT = p:PLACEHOLDER { $$ = p; } | j:VALJSON { $$ = j; }

VALJSON = <VALJ> { $$ = _jqp_string(yy, JPQ_STRFLAGS_JSON, yytext); } 

PLACEHOLDER = ':' <([a-zA-Z0-9]+ | '?')> { $$ = _jqp_string(yy, JPQ_STRFLAGS_PLACEHOLDER, yytext); }

NEXOP = ("not" __ { _jqp_op_negate(yy); })? <("like" | "in" | "re")>    { $$ = _jqp_unit_op(yy, yytext); } 
        | <(">=" | "gte")>                                              { $$ = _jqp_unit_op(yy, yytext); } 
        | <("<=" | "lte")>                                              { $$ = _jqp_unit_op(yy, yytext); } 
        | ('!' _  { _jqp_op_negate(yy); })? <('=' | "eq")>              { $$ = _jqp_unit_op(yy, yytext); } 
        | <('>' | "gt")>                                                { $$ = _jqp_unit_op(yy, yytext); } 
        | <('<' | "lt")>                                                { $$ = _jqp_unit_op(yy, yytext); } 
        
STRP = <CHP+> { $$ = _jqp_string(yy, 0, yytext); }

STRN = '"' <CHJ+> '"' { $$ = _jqp_string(yy, 0, yytext); }

OBJJ = '{' _ (PAIRJ (_ ',' _ PAIRJ)* )? _ '}'

ARRJ = '[' _ (VALJ (_ ',' _ VALJ)* )? _ ']'

PAIRJ = STRJ _ ':' _ VALJ

VALJ =   STRJ
        | NUMJ
        | OBJJ
        | ARRJ
        | "true"
        | "false"
        | "null"

STRJ = '"' CHJ* '"'

HEX = [0-9A-Fa-f]

CHJ = '\\' '"'
      | '\\' '\\'
      | '\\' [bfnrt]
      | '\\' 'u' HEX HEX HEX HEX
      | !'"' .

CHP = '\\' '\\'
      | '\\' [bfnrt]
      | '\\' 'u' HEX HEX HEX HEX
      | ![/"[\]=><!\t\n\r ] .

NUMJ = '-'? NUMI NUMF? NUME?

NUMI = '0' | [1-9] [0-9]*

NUMF = '.' [0-9]+

NUME = [eE] [+-]? [0-9]+

_ = [\t\n\r ]*

__ = [\t\n\r ]+

EOF = !.

%%

#include "./inc/jqpx.c"